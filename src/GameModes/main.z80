SECTION "GM_MAIN",ROM0

SampleWindow:
    DB $87, $84, $8B, $8B, $8E, $A4, $96, $8E, $91, $8B, $83, $A4 ; HELLO WORLD

Game_LoadGFX:
    di
    WaitForVBlank
    ei
    call DisableLCD

    ; Set scroll position
    xor a
    ld [rSCX], a
    ld [rSCY], a

    ; Load graphics
    ld hl, gfx_start
    ld de, _VRAM
    ld bc, gfx_end - gfx_start
    call memcpy

    ld hl, font
    ld de, _VRAM + $800
    ld bc, font_end - font
    call memcpy

    ld hl, bg_start
    ld de, _VRAM + $1000
    ld bc, bg_end - bg_start
    call memcpy

    ; Load background
    ld de, bgmap_start
    ld hl, _SCRN0
    ld b, 18
.bgLoop_Row:
    ld c, 32
.bgLoop_Column:
    ld a, [de]
    ld [hl+], a
    dec c
    jr nz, .bgLoop_Column

    inc de
    dec b
    jr nz, .bgLoop_Row

    ; make a super basic window tilemap
    ld hl, _SCRN1
    ld bc, $0400
    ld a, $80
    call memset ; AAAAAAAAA

    ldh a, [rLCDC]
    set LCDCB_WINADDR, a
    ldh [rLCDC], a
    ld a, 0
    ldh [rWY], a
    ld a, 7
    ldh [rWX], a

    ; set interrupt for line whatever to turn window off
    ld a, 16
    ldh [WindowY], a
    ldh [WindowYTarget], a
    ldh [rLYC], a
    ld a, STATF_LYC
    ldh [rSTAT], a 
ret

; super basic
CheckPaused:
    ; Start pressed this frame but not last frame?
    ldh a, [JoypadButtons]
    ld b, a
    ldh a, [LastButtons]
    cpl
    and a, b ; JoypadButtons & ~LastButtons
    and a, PADF_START
    jp z, .return

    ; actually check pause flag
    ldh a, [IsPaused]
    and a
    jp z, .do_pause

.do_unpause:
    xor a
    ldh [IsPaused], a ; 0
    ; fix moonwalk glitch by cancelling left/right
    ldh a, [JoypadButtons]
    and a, ~(PADF_LEFT | PADF_RIGHT)
    ldh [JoypadButtons], a 
    ld a, 16 ; lines for gameplay
    ldh [WindowYTarget], a
    jp .return

.do_pause:
    ld a, 1
    ldh [IsPaused], a
    ld a, 40 ; lines for pause menu
    ldh [WindowYTarget], a

.return
    ret

SetWindowPos:
    ldh a, [WindowYTarget]
    ld b, a
    ldh a, [WindowY]
    sub a, b
    jp z, .return
    jp c, .increase

.decrease:
    ldh a, [WindowY]
    dec a
    ldh [WindowY], a
    ret

.increase:
    ldh a, [WindowY]
    inc a
    ldh [WindowY], a

.return:
    ret


GameLoop:
    ; Load in-game GFX
    call Game_LoadGFX

    ; Load music
    ;ld hl, ryukenden
    ;call hUGE_init
    
    ; Init objects
    ld hl, SampleObject
    ld de, charArray
    ld bc, _get(`charStruct', `sizeof')
    call memcpy

    xor a, a
    ldh [IsPaused], a

    call EnableLCD
    ei

.loop:
    ; Reset scroll layer
	xor a
	ldh [rSCX], a

    ; Re-enable window
    ldh a, [rLCDC]
    set LCDCB_WINON, a
    ldh [rLCDC], a

    ; Set new window position
    call SetWindowPos

    ; set window position
    ldh a, [WindowY]
    ldh [rLYC], a

    ; Tick global timer
    ldh a, [GlobalTimer]
    inc a
    ldh [GlobalTimer], a

    ; Get frame data ready
    call GenerateActiveObjectsBitfield 
    call readJoypad

    ; check if we need to pause
    call CheckPaused
    ldh a, [IsPaused]
    and a
    jp nz, .VBlankWaitPrepare

    ; Game logic
    call TickAllObjects

    ; Prepare graphics data
    call PrepareAllObjects

    ; Music tick
    ;call _hUGE_dosound

    ; Wait for VBlank before looping
    ; TODO: Create an exit condition
    ; Wait for VBlank
.VBlankWaitPrepare
    xor a
    ld [WaitingForVBlank], a
.VBlankWait
    halt
    ld a, [WaitingForVBlank]
    or a
    jr z, .VBlankWait

    jr .loop
