ACCEL_X_LO        EQU $20
MAX_X_HI          EQU $01
JUMP_STREAK_MAX   EQU $08
JUMP_STEP_DY      EQU $70
JUMP_GRAVITY      EQU $40

TickObject_Player:
	define(`CHAROFFSET', _get(`charStruct', `start'))
	RegisterPair(`CHAR', h, l)
	call Player_Input
	call Player_Collision
	call Player_SetAnim
	ret


Player_Input:
	SeekStructAndSet(`CHAROFFSET', _get(`charStruct', `dx'), CHAR_hi, CHAR_lo)

; Move player left/right with keys

.run_start:
	RegisterPair(`dX', d, e)
	ld dX_lo, CHAR_ref
	inc CHAR_reg
	ld dX_hi, CHAR_ref

	; Are we pressing any buttons?
	ldh a, [JoypadButtons]
	and a, PADF_RIGHT | PADF_LEFT
	jr z, .run_none ; No direction is pressed

	; Did we switch from hard left to hard right?
	ldh a, [JoypadButtons]
	and a, PADF_RIGHT | PADF_LEFT

	; get player run state (for animations)
	ld b, a
	ldh a, [LastButtons]
	and a, PADF_RIGHT | PADF_LEFT

	xor a, b
	ldh [PlayerRunState], a
	cp a, PADF_RIGHT | PADF_LEFT
	jp z, .run_none ; yep!

.run_left_start:
	; pressing left?
	ldh a, [JoypadButtons]
	and a, PADF_RIGHT

	; set state
	ld a, 1
	ldh [PlayerRunState], a
	jp nz, .run_right
	ld a, 2
	ldh [PlayerRunState], a

	; negate de
	xor a
	sub e
	ld e,a
	ld a,0
	sbc d
	ld d,a

.run_right:
	ld a, d
	cp a, MAX_X_HI
	jp nc, .run_left

	ld a, e
	add a, ACCEL_X_LO
	ld e, a
	jp nc, .run_left

	inc d
	jp .run_left

.run_left
	; pressing left?
	ldh a, [JoypadButtons]
	and a, PADF_RIGHT
	jp nz, .run_done

	; negate de
	xor a
	sub e
	ld e,a
	ld a,0
	sbc d
	ld d,a

	jp .run_done

.run_none
	ld de, 0
	xor a, a
	ldh [PlayerRunState], a

.run_done
	; load de into [hl]
	ld CHAR_ref, dX_hi
	dec CHAR_reg
	ld CHAR_ref, dX_lo

	InvalidatePair(`dX')

.jump_start:
	SeekStructAndSet(`CHAROFFSET', _get(`charStruct', `dy'), CHAR_hi, CHAR_lo)

	ldh a, [JoypadButtons]
	and a, PADF_A
	jp z, .jump_none

	ldh a, [JumpDone]
	and a
	jp nz, .return

.jump_tick:
	; hit the jumpstreak max?
	ldh a, [JumpStreak]
	cp a, JUMP_STREAK_MAX
	jp nc, .return

	inc a
	ldh [JumpStreak], a

	; set player dY (lo)
	inc CHAR_reg
	ld a, CHAR_ref ; lo
	sub a, JUMP_STEP_DY
	ld CHAR_ref, a
	jp nc, .jump_tick_lodone

	dec CHAR_reg
	dec CHAR_ref

	; sub one to y if jumpstreak = 1
	ldh a, [JumpStreak]
	cp a, 1
	jp c, .return

	SeekStructAndSet(`CHAROFFSET', _get(`charStruct', `y'), CHAR_hi, CHAR_lo)
	dec CHAR_ref
	dec CHAR_ref
	dec CHAR_ref
	dec CHAR_ref
	SeekStructAndSet(`CHAROFFSET', _get(`charStruct', `dy'), CHAR_hi, CHAR_lo)
	jp .return

.jump_tick_lodone:
	dec hl
	jp .return

.jump_none:
	ld a, 1
	ldh [JumpDone], a

.return:
	SeekStructAndSet(`CHAROFFSET', _get(`charStruct', `start'), CHAR_hi, CHAR_lo)
	InvalidatePair(`CHAR')
	ret

; Collision checking (right now just floor)
; HL = object offset
Player_Collision:
	define(`CHAROFFSET', _get(`charStruct', `start'))
	RegisterPair(`CHAR', h, l)
	SeekStructAndSet(`CHAROFFSET', _get(`charStruct', `y'), CHAR_hi, CHAR_lo)
	ld a, CHAR_ref ; y value
	cp a, FieldHeight ; temporary
	jp c, .setgravity

	ld a, FieldHeight
	ld CHAR_ref, a

	xor a, a
	ldh [JumpStreak], a
	ldh [PlayerInAir], a

	; set JumpDone if not holding a
	ldh a, [JoypadButtons]
	and a, PADF_A
	ldh [JumpDone], a

	; clear dY
	SeekStructAndSet(`CHAROFFSET', _get(`charStruct', `dy'), CHAR_hi, CHAR_lo)
	ld [hl+], a
	ld [hl-], a
	SeekStructAndSet(`CHAROFFSET', _get(`charStruct', `y'), CHAR_hi, CHAR_lo)
	jp .return

.setgravity:
	ld a, 1
	ldh [PlayerInAir], a

	SeekStructAndSet(`CHAROFFSET', _get(`charStruct', `dy'), CHAR_hi, CHAR_lo)
	inc hl
	ld a, [hl]
	add a, JUMP_GRAVITY
	ld [hl-], a
	jp nc, .nocarry
	
	inc [hl]

.nocarry
	SeekStructAndSet(`CHAROFFSET', _get(`charStruct', `y'), CHAR_hi, CHAR_lo)

.return:
	SeekStructAndSet(`CHAROFFSET', _get(`charStruct', `start'), CHAR_hi, CHAR_lo)
	ret

; Set player animation as needed
Player_SetAnim:
	SeekStructAndSet(`CHAROFFSET', _get(`charStruct', `anim'), CHAR_hi, CHAR_lo)

	; jumping?
	ldh a, [PlayerInAir]
	and a
	jp z, .run

	; get dY sign
	; too lazy to use the fancy struct thing honestly
	SeekStructAndSet(`CHAROFFSET', _get(`charStruct', `dy'), CHAR_hi, CHAR_lo)

	ld a, [hl]
	ld b, a

	SeekStructAndSet(`CHAROFFSET', _get(`charStruct', `anim'), CHAR_hi, CHAR_lo)
	bit 7, b
	jp nz, .jump_rise

	ld b, ANIM_FALL
	call SetAnim
	jp .jump_done

.jump_rise
	ld b, ANIM_JUMP
	call SetAnim

.jump_done
	jp .setdir

.run
	ldh a, [PlayerRunState]
	cp a, 0
	jp z, .run_stop

	ld b, ANIM_RUN
	call SetAnim
	jp .setdir

.run_stop
	; holding down?
	ldh a, [JoypadButtons]
	and a, PADF_DOWN
	jp z, .run_nocrouch

	ld b, ANIM_CROUCH
	call SetAnim
	jp .setdir

.run_nocrouch
	ld b, ANIM_IDLE
	call SetAnim

.setdir
	SeekStructAndSet(`CHAROFFSET', _get(`charStruct', `info'), CHAR_hi, CHAR_lo)
	ldh a, [PlayerRunState]
	cp a, 0
	jp z, .return

	; left?
	cp a, 1
	jp z, .setdir_left

.setdir_right
	ld a, [hl]
	or a, %01000000
	ld [hl], a
	jp .return

.setdir_left:
	ld a, [hl]
	and a, %10111111
	ld [hl], a
.return
	ret

InvalidatePair(`CHAR')
