; Defines
include "src/macros.m4"      ; M4 Macros
include "src/variables.z80"  ; Memory locations & structs
include "src/hardware.inc"   ; GB constants
include "src/header.z80"     ; ROM header

; Core Libraries
include "src/interrupt.z80"  ; Interrupt service routines
include "src/memory.z80"     ; Memory macros & routines
include "src/display.z80"    ; PPU routines
include "src/joypad.z80"     ; Joypad routine
include "src/math.z80"       ; Math macros & routines

; Engine stuff
include "src/gfxinclude.z80" ; Graphics data
include "src/sprites.z80"    ; Sprite routines
include "src/objects.z80"    ; Object/AI routines

; Game modes
include "src/GameModes/vizsplash.z80" ; InvisibleUp splash screen
include "src/GameModes/main.z80"      ; main game

SECTION "main", ROM0

; This RGBSet Macro uses RGB values from 0 to 255. It then reduces the range
; to 0-32. With a range 0-32, each color component is represented by 5 bits,
; and a full 3-tuple color is represented by 15 bits. (aka 2 bytes)
; Blue:  bits 14-10		(note that bit 15 is not used)
; Green: bits 9-5
; Red:   bits 4-0
; Example: rgb_Set 255, 0, 0  ; RED
rgb: MACRO
	; DW (define-word) stores LSB then MSB in-memory
	; meaning that passing rgb_Set a tuple of the form RRR, GGG, BBB
	; will be stored in-rom as two successive bytes: %GGGRRRRR, %xBBBBBGG
	; yet the 16-bit value (before writing to rom) is %xBBBBBGG %GGGRRRRR
	; This is the exact order (LSB first) that the GBC expects in rBCPD
	DW	((\3 >> 3) << 10) + ((\2 >> 3) << 5) + (\1 >> 3)
	ENDM

clearRAM:
   ; Clear RAM and VRAM
    xor a

    ld hl, WramStart
    ld bc, WramEnd - WramStart
    call memset

    ld hl, HramStart
    ld bc, HramEnd - HramStart
    call memset

    ; VRAM tiles
    ld hl, $8000
    ld bc, $9FFF - $8000
    call memset

    ; VRAM sprites
    ld hl, $FE00
    ld bc, $FE9F - $FE00
    call memset

    ret

; Main Loop
main:
    ; Set stack to top of WRAM
    ld sp, $DFFF

    ; store console type
    ldh [ConsoleType], a

    ; Set interrupts and timers
    xor a
    ldh [rIF], a
    ld a, IEF_VBLANK | IEF_LCDC
    ldh [rIE], a

    ; Disable LCD
    di
    WaitForVBlank
    ei
    call DisableLCD

    ; Set palette
    ld a, %11100100
    ld [rBGP], a
    ld [rOBP0], a
    ; Light palette
    rlca
    rlca
    ld [rOBP1], a

    ; set CGB palette
.cgb_bg_set:
    ld a, [ConsoleType]
    cp a, $11
    jp nz, .cgb_fg_done
    ; autoincrement
    ld a, %10000000
    ldh [rBCPS], a
    ld b, 8
.cgb_bg_loop:
    ; white
    ld a, $FF
    ldh [rBCPD], a
    ldh [rBCPD], a
    ; light grey
    ld a, $94
    ldh [rBCPD], a
    ld a, $52
    ldh [rBCPD], a
    ; dark grey
    ld a, $8C
    ldh [rBCPD], a
    ld a, $31
    ldh [rBCPD], a
    ; black
    ld a, $00
    ldh [rBCPD], a
    ldh [rBCPD], a

    ld a, b
    sub a, 1
    ld b, a
    jp nz, .cgb_bg_loop
.cgb_bg_done:

.cgb_fg_set:
    ; autoincrement
    ld a, %10000000
    ldh [rOCPS], a
    ld b, 8
.cgb_fg_loop:
    ; white
    ld a, $FF
    ldh [rOCPD], a
    ldh [rOCPD], a
    ; light grey
    ld a, $94
    ldh [rOCPD], a
    ld a, $52
    ldh [rOCPD], a
    ; dark grey
    ld a, $8C
    ldh [rOCPD], a
    ld a, $31
    ldh [rOCPD], a
    ; black
    ld a, $00
    ldh [rOCPD], a
    ldh [rOCPD], a

    ld a, b
    sub a, 1
    ld b, a
    jp nz, .cgb_fg_loop
.cgb_fg_done:
  
    ; Clear RAM
    call clearRAM

    ; Copy DMA code to WRAM
    ld hl, SpriteDMA
    ld de, $FF80
    ld bc, SpriteDMA_End - SpriteDMA
    call memcpy

    ; Enable sound playback
    ld a, $80
    ld [rAUDENA], a
    ld a, $FF
    ld [rAUDTERM], a
    ld a, $77
    ld [rAUDVOL], a

    call InitDisplay
    ;call InvizLoop
    call GameLoop

; End Main