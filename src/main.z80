; Defines
include "src/macros.m4"      ; M4 Macros
include "src/variables.z80"  ; Memory locations & structs
include "src/hardware.inc"   ; GB constants
include "src/header.z80"     ; ROM header

; Core Libraries
include "src/interrupt.z80"  ; Interrupt service routines
include "src/memory.z80"     ; Memory macros & routines
include "src/display.z80"    ; PPU routines
include "src/joypad.z80"     ; Joypad routine
include "src/math.z80"       ; Math macros & routines

; Game stuff
include "src/gfxinclude.z80" ; Graphics data
include "src/sprites.z80"    ; Sprite routines
include "src/objects.z80"    ; Object/AI routines

SECTION "main", ROM0
; Interrupt handlers

clearRAM:
   ; Clear RAM and VRAM
    xor a

    ld hl, WramStart
    ld bc, WramEnd - WramStart
    call memset

    ld hl, HramStart
    ld bc, HramEnd - HramStart
    call memset

    ; VRAM tiles
    ld hl, $8000
    ld bc, $9FFF - $8000
    call memset

    ; VRAM sprites
    ld hl, $FE00
    ld bc, $FE9F - $FE00
    call memset

    ret

Inviz_LoadGFX:
    di
    WaitForVBlank
    ei
    call DisableLCD

    ; Set scroll position
    xor a
    ld [rSCX], a
    ld [rSCY], a

    ; Load tile data
    ld hl, invizsplash_tile_data
    ld de, $9010
    ld bc, invizsplash_tile_size
    call memcpy

    ; Load map data
    ld de, invizsplash_map_data
    ld hl, _SCRN0
    ld b, invizsplash_map_width
    ld c, invizsplash_map_height

.copyloop
    ld a, [de]
    inc de
    ld [hl+], a
    dec b
    jp nz, .copyloop

    ld a, c
    ld bc, (32 - invizsplash_map_width)
    add hl, bc
    ld b, invizsplash_map_width
    ld c, a

    dec c
    jp nz, .copyloop

    call EnableLCD
    ret

Game_LoadGFX:
    di
    WaitForVBlank
    ei
    call DisableLCD

    ; Set scroll position
    xor a
    ld [rSCX], a
    ld [rSCY], a

    ; Load graphics
    ld hl, gfx_start
    ld de, _VRAM
    ld bc, gfx_end - gfx_start
    call memcpy

    ld hl, font
    ld de, _VRAM + $800
    ld bc, font_end - font
    call memcpy

    ld hl, bg_start
    ld de, _VRAM + $1000
    ld bc, bg_end - bg_start
    call memcpy

    ; Load background
    ld de, bgmap_start
    ld hl, _SCRN0
    ld b, 18
.bgLoop_Row:
    ld c, 32
.bgLoop_Column:
    ld a, [de]
    ld [hl+], a
    dec c
    jr nz, .bgLoop_Column

    inc de
    dec b
    jr nz, .bgLoop_Row

    ; Lay down some text
;    ld hl, _SCRN0 + 32
;    ld a, $85
;    ld [hl+], a
;    ld [hl+], a
;    ld [hl+], a
;    ld [hl+], a

    call EnableLCD

ret

; Inviz splash screen loop
InvizLoop:
    call Inviz_LoadGFX
    ld b, $FF

.inviz_loop:
    di
    WaitForVBlank
    ei
    dec b 
    jp nz, .inviz_loop

    ret

GameLoop:
    ; Load in-game GFX
    call Game_LoadGFX
    
    ; Init objects
    ld hl, SampleObject
    ld de, charArray
    ld bc, _get(`charStruct', `sizeof')
    call memcpy

    call EnableLCD
    ei

.loop:
    ; Reset scroll layer
	xor a
	ldh [rSCX], a

    ; Get frame data ready
    call GenerateActiveObjectsBitfield 
    call readJoypad

    ; Game logic
    call TickAllObjects

    ; Prepare graphics data
    call PrepareAllObjects

    ; Tick global timer
    ldh a, [GlobalTimer]
    inc a
    ldh [GlobalTimer], a

    ; Wait for VBlank before looping
    ; TODO: Create an exit condition
    ; Wait for VBlank
    xor a
    ld [WaitingForVBlank], a
.VBlankWait
    halt
    ld a, [WaitingForVBlank]
    or a
    jr z, .VBlankWait

    jr .loop

; Main Loop
main:
    ; Set stack to top of WRAM
    ld sp, $DFFF

    ; Set interrupts and timers
    xor a
    ldh [rIF], a
    ld a, IEF_VBLANK | IEF_LCDC
    ldh [rIE], a

    ; Disable LCD
    di
    WaitForVBlank
    ei
    call DisableLCD

    ; Set palette
    ld a, %11100100
    ld [rBGP], a
    ld [rOBP0], a
    ; Light palette
    rlca
    rlca
    ld [rOBP1], a
  
    ; Clear RAM
    call clearRAM

    ; Copy DMA code to WRAM
    ld hl, SpriteDMA
    ld de, $FF80
    ld bc, SpriteDMA_End - SpriteDMA
    call memcpy

    call InitDisplay
    ;call InvizLoop
    call GameLoop

; End Main